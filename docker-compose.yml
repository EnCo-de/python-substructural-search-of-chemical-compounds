# version: '3.8'
services:
  web1:
    build: ./src
    ports:
      - "8000:8000"
    volumes:
      - ./src:/code/src
    env_file: ".env"
    environment:
      SERVER_ID: SERVER-1
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  web2:
    build: ./src
    ports:
      - "8080:8000"
    volumes:
      - ./src:/code/src
    env_file: ".env"
    environment:
      SERVER_ID: SERVER-2
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx:/etc/nginx/conf.d
    restart: always
    depends_on:
      - web1
      - web2

  postgres:
    image: postgres:alpine3.20
    # container_name: postgres_drug_app
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    restart: always

  celery_worker:
    # build: .
    # command: celery -A src.celery_worker worker --loglevel=info
    build: ./src
    entrypoint: celery -A src.celery_worker worker --loglevel=info
    env_file: ".env"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    volumes:
      - .:/code

volumes:
  pgdata:
    driver: local